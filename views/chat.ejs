<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('partials/header') %>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Crimson+Pro" />
  <link rel="stylesheet" href="/css/chat.css" />
  <link rel="icon" type="image/png" href="/images/iw5.png" />
  <title>IndianWife.in - Chat</title>
</head>
<body>
  <%- include('partials/popmsg') %> 
  <%- include('partials/nav') %>
  <div class="chat-container">
    <div class="profile-top">
      <% if (user.images && user.images.length > 0) { %>
        <img src="<%= user.images[0] %>" alt="User Profile">
      <% } else { %>
        <img src="/images/profile.jpg" alt="Default Profile">
      <% } %>
      <div>
        <h3><%= user.fullname %></h3>
        <%
  const rawLastSeen = user.lastSeenTime; // Full date-time from DB
  let lastSeen = null;
  let isOnline = false;
  let displayTime = "Not available";

  if (rawLastSeen) {
    const lastSeenDate = new Date(rawLastSeen);
    const now = new Date();
    const diffMinutes = (now - lastSeenDate) / (1000 * 60); // Convert ms to minutes

    // Determine online status (if last seen within 10 minutes)
    isOnline = diffMinutes < 10;

    // Format last seen time (HH:mm)
    displayTime = lastSeenDate.toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: false
    });
  }
%>

<div>
  <% if (!rawLastSeen) { %>
    <p class="notavailable">Not available</p>
  <% } else if (isOnline) { %>
    <p class="online">Online</p>
  <% } else { %>
    <p class="offline">Last seen at <%= displayTime %></p>
  <% } %>
</div>
<button id="kundali-match-btn" onclick="sendKundaliRequest(this)" data-match-with-id="<%= user._id %>">
  Request Kundali Match
</button>
<p id="message"></p>
<a href="/chats"><i class="fa-solid fa-arrow-left"></i></a>

      </div>
        
      
        
    </div>
      <div class="block">
        <button 
  class="block-btn" 
  data-match-with-id="<%= user._id %>" 
  onclick="sendBlockRequest(this)">
  <%= currUser.blockedUsers.includes(user._id) ? "Unblock" : "Block" %>
</button>
      </div>

    <!-- Chat messages container -->
    <div class="messages" id="messages">
      <!-- Loop over old messages from database -->
      <% messages.forEach(message => { %>
        <div class="message <%= message.senderId.toString() === currUser._id.toString() ? 'sent' : 'received' %>">
          <%
            // Determine sender's name: current user vs chat partner.
            const senderLabel = message.senderId.toString() === currUser._id.toString() 
              ? currUser.fullname 
              : user.fullname;
            const createdAt = new Date(message.createdAt);
            const timeString = createdAt.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
          %>
           <%= message.message %>
          <span class="message-time"><%= timeString %></span>
        </div>
      <% }); %>
    </div>

    <!-- Chat input area -->
    <div class="chat-input">
      <% if (currUser.blockedUsers.includes(user.id) || user.blockedUsers.includes(currUser.id)) { %>

        <% if (currUser.blockedUsers.includes(user.id)) { %>
             <p>You blocked the User Unblock him to send message!</p>
          <% } else { %>
            <p>This User Blocked You !</p>
          <% } %>
        
    <% } else { %>
      <input type="text" id="messageInput" placeholder="Type your message" autofocus />
      <button id="sendButton">Send</button>
    <% } %>
    
      
    </div>
  </div>

  <!-- Include Socket.io client library -->
  <script src="/socket.io/socket.io.js"></script>
  <script>
    // Get current user and chat partner info from EJS variables
    const currentUserId = "<%= currUser._id %>";
    const partnerUserId = "<%= partnerUserId %>"; // or use user._id if available
    const currUserName = "<%= currUser.fullname %>";
    const partnerName = "<%= user.fullname %>";

    // Helper function: create a unique room name (order-independent)
    const getRoomName = (id1, id2) => {
      return [id1, id2].sort().join("-");
    };

    const room = getRoomName(currentUserId, partnerUserId);

    // Connect to Socket.io server
    const socket = io();

    // Join the room
    socket.emit("joinRoom", room);

    // Send message on button click
    document.getElementById("sendButton").addEventListener("click", () => {
      const messageInput = document.getElementById("messageInput");
      const message = messageInput.value.trim();
      if (!message) return;

      socket.emit("sendMessage", {
        senderId: currentUserId,
        receiverId: partnerUserId,
        message: message,
      });

      messageInput.value = "";
    });

    // Send message on Enter key press
    document.getElementById("messageInput").addEventListener("keyup", (event) => {
      if (event.key === "Enter") {
        document.getElementById("sendButton").click();
      }
    });

    // Listen for incoming messages
    socket.on("message", (data) => {
      const messagesDiv = document.getElementById("messages");
      const messageEl = document.createElement("div");

      // Apply class based on sender
      messageEl.classList.add("message");
      messageEl.classList.add(data.senderId === currentUserId ? "sent" : "received");

      // Use actual names instead of generic "Partner"
      const senderLabel = data.senderId === currentUserId ? currUserName : partnerName;

      // Format the time from the received data's createdAt field if available
      const createdAt = new Date(data.createdAt);
      const timeString = createdAt.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

      messageEl.innerHTML = `${data.message}<span class="message-time">${timeString}</span>`;
      messagesDiv.appendChild(messageEl);

      // Auto-scroll to the bottom
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    });
   

    const button = document.querySelector("#kundaliRequestBtn");


    function sendKundaliRequest(button) {
    const matchWithId = button.getAttribute("data-match-with-id");

    fetch("/request-kundali-match", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ matchWithId })
    })
    .then(response => response.json())
    .then(data => {
      console.log(data);
      document.getElementById("message").innerText = data.message;
    })
    .catch(error => {
      console.error("Error:", error);
    });
  }


  function sendBlockRequest(button) {
  const id = button.getAttribute("data-match-with-id");

  fetch("/block", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ id }),
  })
    .then(response => response.json())
    .then(data => {
      console.log(data);

      if (data.success) {
        // Toggle button text based on action performed
        button.textContent = button.textContent === "Block" ? "Unblock" : "Block";
      }
    })
    .catch(error => {
      console.error("Error:", error);
    });
}

    

  </script>
</body>
</html>
